// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User model for authentication (future feature)
model User {
  id        String   @id @default(cuid())
  email     String?  @unique
  name      String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  resumes   Resume[]
}

// Main Resume model
model Resume {
  id               String           @id @default(cuid())
  userId           String?
  user             User?            @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // Job Description
  jobDescription   String?          @db.Text
  jobFileName      String?
  jobFileSize      Int?
  
  // Configuration
  aiModel          String?
  template         String?
  languageStyle    String?
  wordLimit        Int?
  emphasisAreas    String[]         @default([])
  
  // Generated Content
  generatedResume  String?          @db.Text
  finalResume      String?          @db.Text
  
  // Metadata
  status           ResumeStatus     @default(DRAFT)
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
  
  // Relations
  sourceDocuments  SourceDocument[]
  resumeVersions   ResumeVersion[]
  
  @@index([userId])
  @@index([status])
  @@index([createdAt])
}

// Source documents uploaded by user
model SourceDocument {
  id          String   @id @default(cuid())
  resumeId    String
  resume      Resume   @relation(fields: [resumeId], references: [id], onDelete: Cascade)
  
  fileName    String
  fileSize    Int
  fileType    String
  fileUrl     String?  // URL if stored in cloud storage
  fileContent String?  @db.Text // Or store content directly
  
  uploadedAt  DateTime @default(now())
  
  @@index([resumeId])
}

// Version history for resumes
model ResumeVersion {
  id           String   @id @default(cuid())
  resumeId     String
  resume       Resume   @relation(fields: [resumeId], references: [id], onDelete: Cascade)
  
  versionNumber Int
  content      String   @db.Text
  changelog    String?
  
  createdAt    DateTime @default(now())
  
  @@unique([resumeId, versionNumber])
  @@index([resumeId])
}

// Enum for resume status
enum ResumeStatus {
  DRAFT
  GENERATING
  GENERATED
  REVIEWING
  FINALIZED
  EXPORTED
}
